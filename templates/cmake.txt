# CMakeLists.txt GENERATED BY PICO PROJECT GENERATOR

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)

# initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)
set(PICO_SDK_PATH "{{ sdk_path }}")
                    
# pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project({{ project_name }} C CXX ASM)

{% if exceptions %}
set(PICO_CXX_ENABLE_EXCEPTIONS 1)
{% endif %}
{% if rtti %}
set(PICO_CXX_ENABLE_RTTI 1)
{% endif %}
{% if configs %}
# Add any PICO_CONFIG entries specified in the Advanced settings
{% for c, v in configs.items() %}
{% set v = v == "True"%}
add_compile_definitions({{c}}={{ 1 if v else 0}})
{% endfor %}
{% endif %}
# initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# add executable. Default name is the project name
{% set extension = ".cpp" if want_cpp else ".c" %}
add_executable({{project_name}} {{project_name}}{{extension}})

pico_set_program_name({{ project_name }} "{{ project_name}}")
pico_set_program_version({{project_name}} "0.1")

{% if want_run_from_ram %}
# no_flash means the target is to run from RAM
pico_set_binary_type({{project_name}} no_flash)
{% endif %}
# control the console output destinations
pico_enable_stdio_uart({{project_name}} {{1 if want_uart else 0}})
pico_enable_stdio_usb({{project_name}} {{1 if want_usb else 0}})

# pull in common dependencies {% if features | length  %}and additional hardware support{% endif %} 
target_link_libraries({{project_name}}
    pico_stdlib
    {% for lib in features %}
    {{ features_list[loop.index] }}
    {% endfor %})

pico_add_extra_outputs({{project_name}})
